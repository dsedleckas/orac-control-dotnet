@using OracControl.Services;
@using  Microsoft.Extensions.Configuration;
@inject IOscServer server
@inject IConfiguration config
@implements IDisposable

    <div class="d-flex justify-content-between flex-wrap">
        <div class="p-1 btn-group @(!config.GetValue<bool>("EnableOnScreenNavigationButtons") ? "d-none" : "")" role="group">
            <button onclick="@(() => ModuleChange(PrevModuleAddress))" class="btn btn-outline-secondary" type="button">◄</button>
            <button class="btn btn-outline-secondary" style="width:140px;" type="button">@(ModuleSlot): @(ModuleName)</button>
            <button onclick="@(() => ModuleChange(NextModuleAddress))" class="btn btn-outline-secondary" type="button">►</button>
        </div>      
        <div class="p-1 btn-group @(!config.GetValue<bool>("EnableOnScreenNavigationButtons") ? "d-none" : "")" role="group">
            <button onclick="@(() => PageChange(PrevPageAddress))" class="btn btn-outline-secondary" type="button">◄</button>
            <button class="btn btn-outline-secondary" style="width:140px;" type="button">@(PageName)</button>
            <button onclick="@(() => PageChange(NextPageAddress))" class="btn btn-outline-secondary" type="button">►</button>
        </div>
        <div class="p-1 modal-container">
            <input id="modal-toggle" type="checkbox" bind="@ShowMenu" />
            <label class="btn btn-outline-secondary" style="margin-bottom:0;cursor:pointer;" for="modal-toggle">Menu</label> 
            <label class="modal-backdrop" for="modal-toggle"></label>
            <div class="modal-content" style="border:none;">
                <label class="modal-close" style="display:none;" for="modal-toggle">&#x2715;</label>
                <OracMenuControl /> 
            </div>          
        </div>
    </div>

@functions {
    [Parameter] protected EventCallback<bool> OnMenuStateChange { get; set; }

    private bool _showMenu = false;
    [Parameter] public bool ShowMenu
    {
        get => _showMenu;
        set
        {
            if (_showMenu != value)
            {
                _showMenu = value;
                OnMenuStateChange.InvokeAsync(value);
            }
        }
    }

    public string ModuleSlot { get; set; } = "Unknown";

    public string ModuleName { get; set; } = "Unknown";

    public string OscReceiveAddress { get; set; }

    public string NextModuleAddress { get; set; } = "/ModuleNext";

    public string PrevModuleAddress { get; set; } = "/ModulePrev";

    public string PageName { get; set; } = "Empty";

    public string NextPageAddress { get; set; } = "/PageNext";

    public string PrevPageAddress { get; set; } = "/PagePrev";

    public void HandleKeyPress(UIKeyboardEventArgs ev)
    {
        Console.WriteLine(ev.Key, ev.ShiftKey);
    }

    private void ModuleChange(string address)
    {
        server.Send(address, 1);
    }

    private void PageChange(string address)
    {
        server.Send(address, 1);
    }

    public void OnMessageReceived(object sender, OscMessage msg)
    {
        if (msg.Address == "/module")
        {
            var mseg = ((string)msg.Arg[0]).Split(':').Select(_ => _.TrimStart().TrimEnd()).ToArray();
            ModuleSlot = mseg[0]?.ToUpper() ?? "Unknown";
            ModuleName = mseg[1];
            base.Invoke(StateHasChanged);
        }
        else if (msg.Address == "/page")
        {
            var name = (string)msg.Arg[0];
            if (string.IsNullOrWhiteSpace(name)) {
                name = "Empty";
            }

            if (PageName != name) {
                PageName = name;
                base.Invoke(StateHasChanged);
            }
        }
    }

    protected override void OnInit()
    {
        server.OscMessageArrived += OnMessageReceived;
    }

    public void Dispose()
    {
        server.OscMessageArrived -= OnMessageReceived;
    }

}
