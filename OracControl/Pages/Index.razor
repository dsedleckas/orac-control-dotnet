@page "/"
@using OracControl.Components;
@using OracControl.Services;
@using  Microsoft.Extensions.Configuration;
@inject IJSRuntime JSRuntime
@inject IOscServer server
@inject IConfiguration config

@implements IDisposable


    <div class="main">
        <div class="container container-centered @(IsLoaded ? "d-none" : "")">
            <OracConnection />
        </div>
        <div class="card @(!IsLoaded ? "d-none" :"")">
            <div class="card-header">
                <OracModuleControl ShowMenu="@ShowMenu" OnMenuStateChange="@OnMenuStateChange" />
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-6 col-md-3">
                        <OracParameterControl Prefix="/P1" />
                    </div>
                    <div class="col-6 col-md-3">
                        <OracParameterControl Prefix="/P2" />
                    </div>
                    <div class="col-6 col-md-3">
                        <OracParameterControl Prefix="/P3" />
                    </div>
                    <div class="col-6 col-md-3">
                        <OracParameterControl Prefix="/P4" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-6 col-md-3">
                        <OracParameterControl Prefix="/P5" />
                    </div>
                    <div class="col-6 col-md-3">
                        <OracParameterControl Prefix="/P6" />
                    </div>
                    <div class="col-6 col-md-3">
                        <OracParameterControl Prefix="/P7" />
                    </div>
                    <div class="col-6 col-md-3">
                        <OracParameterControl Prefix="/P8" />
                    </div>
                </div>
            </div>
        </div>
    </div>

@functions {

    public bool IsLoaded { get; set; } = false;

    public bool ShowMenu { get; set; } = false;

    public async void OnMenuStateChange(bool value)
    {
        ShowMenu = value;
    }

    protected override async Task OnAfterRenderAsync()
    {
        await JSRuntime.InvokeAsync<object>(
                "keyboard.init",
                new DotNetObjectRef(this));
    }

    public void OnMessageReceived(object sender, OscMessage msg)
    {
        if (!IsLoaded && msg.Address == "/ConnectComplete")
        {
            IsLoaded = true;
            base.Invoke(StateHasChanged);
        }
    }

    private Dictionary<string, string> KeyMappings { get; set; }

    protected override void OnInit()
    {
        KeyMappings = config.GetSection("KeyboardMappings").GetChildren()
            .Select(item => new KeyValuePair<string, string>(item.Key, item.Value))
            .ToDictionary(x => x.Key, x => x.Value);

        server.OscMessageArrived += OnMessageReceived;
    }

    public void Dispose()
    {
        server.OscMessageArrived -= OnMessageReceived;
    }

    [JSInvokable]
    public Task OnKeyDown(string keyCode)
    {
        if(KeyMappings.TryGetValue(keyCode, out var address))
        {
            if ((address == "/NavNext" || address == "/NavPrev" || address == "/NavActivate") && !ShowMenu)
            {
                ShowMenu = true;
                base.Invoke(StateHasChanged);
            }
            else if (address == "CloseMenu")
            {
                if (ShowMenu)
                {
                    ShowMenu = false;
                    base.Invoke(StateHasChanged);
                }
            }
            else
            {
                server.Send(address, 1);
            }
        }

        return Task.CompletedTask;
    }
}